Let me explain the `awk` command you provided and the sorting part step by step:

### Breakdown of the `awk` Command:

1. **`awk`**: A powerful text processing tool in Unix/Linux, often used for pattern scanning and processing.

2. **`'{ for (i=1; i<=NF; i++) { count[$i]++ } }`**:
   - **`for (i=1; i<=NF; i++)`**: Loops over each field (word) in the current line. `NF` stands for "Number of Fields," so this loop runs from 1 to the number of words in the line.
   - **`count[$i]++`**: Uses an associative array named `count` to keep track of the number of times each word appears. `$i` represents the current word, and `count[$i]++` increments the count for that word.

3. **`END { for (word in count) print word, count[word] }`**:
   - **`END`**: This block runs after all the lines in the input have been processed.
   - **`for (word in count)`**: Loops through all the words stored in the `count` array.
   - **`print word, count[word]`**: Prints each word and its corresponding count.

### Sorting the Output:

- **`| sort -k2,2nr`**: This sorts the output based on the frequency of the words.
  - **`|`**: The pipe operator, which takes the output of the `awk` command and passes it as input to the `sort` command.
  - **`sort`**: A command that sorts lines of text files.
  - **`-k2,2`**: Specifies that sorting should be done based on the second column (the frequency count).
  - **`nr`**: `n` stands for numeric sorting, and `r` stands for reverse order. Together, `nr` sorts the numbers in descending order.

### Summary of the Command:

- **`awk '{ for (i=1; i<=NF; i++) { count[$i]++ } } END { for (word in count) print word, count[word] } ' words.txt`**:
  - This part reads each word in `words.txt`, counts how many times each word appears, and prints each word with its count.

- **`| sort -k2,2nr`**:
  - This part sorts the words by their frequency in descending order.

### Example Input and Output:

If `words.txt` contains:
```
apple banana apple orange banana apple
```

After running the command, the output will be:
```
apple 3
banana 2
orange 1
```

This output shows that "apple" appears 3 times, "banana" appears 2 times, and "orange" appears once, sorted by frequency in descending order.